rule "InitializeOnStartup"
when
	System started
then
	KebaOnOffDelay.sendCommand(OFF)
	KebaDelay.sendCommand(OFF)
end

rule "rPVChargeStoppLimit"
when 
	Item PVChargeStartLimit changed
then
	PVChargeStoppLimit.sendCommand(4500 - (PVChargeStartLimit.state as DecimalType).intValue)
end

rule "rPVCharge2StoppLimit"
when 
	Item PVCharge2StartLimit changed
then
	PVCharge2StoppLimit.sendCommand(5400 - (PVCharge2StartLimit.state as DecimalType).intValue)
end

rule "rPVChargeStart"
when Item FroniusPV changed
then
if (KebaOnOffDelay.state != ON) {
	if (ChargeMode.state == 2 && KebaVehiclePlugged.state == ON && KebaEnabled.state == OFF && Charge2Mode.state == 2 && Keba2VehiclePlugged.state == ON && Keba2Enabled.state == OFF) {
		if ((PVChargeStartLimit.state as Number) < (PVCharge2StartLimit.state as Number)) {
			if ((OhmpilotACTotal.state as DecimalType + PowerToGrid.state as DecimalType) > PVChargeStartLimit.state as DecimalType) {
				KebaEnabled.sendCommand(ON)
				KebaOnOffDelay.sendCommand(ON)
				KebaDelay.sendCommand(ON)
			}
		}
		else {
			if ((OhmpilotACTotal.state as DecimalType + PowerToGrid.state as DecimalType) > PVCharge2StartLimit.state as DecimalType) {
			Keba2Enabled.sendCommand(ON)
			KebaOnOffDelay.sendCommand(ON)
			KebaDelay.sendCommand(ON)	
			}
		}
	}
	else if (ChargeMode.state == 2 && KebaVehiclePlugged.state == ON && KebaEnabled.state == OFF) {
		if ((OhmpilotACTotal.state as DecimalType + PowerToGrid.state as DecimalType) > PVChargeStartLimit.state as DecimalType) {
			KebaEnabled.sendCommand(ON)
			KebaOnOffDelay.sendCommand(ON)
			KebaDelay.sendCommand(ON)
		}
	}
	else if (Charge2Mode.state == 2 && Keba2VehiclePlugged.state == ON && Keba2Enabled.state == OFF) {
		if ((OhmpilotACTotal.state as DecimalType + PowerToGrid.state as DecimalType) > PVCharge2StartLimit.state as DecimalType) {
			Keba2Enabled.sendCommand(ON)
			KebaOnOffDelay.sendCommand(ON)
			KebaDelay.sendCommand(ON)	
		}
	}
}
end

rule "rPVChargePowerAdjust"
when
	Item OhmpilotACTotal changed or
	Item FroniusGrid changed
then
	if (ChargeMode.state == 2 && KebaDelay.state != ON && KebaState.state == 3) {
		KebaCurrentRangeDiff.sendCommand(((OhmpilotACTotal.state as DecimalType - FroniusGrid.state as DecimalType - 100) / 68).intValue)	
		if ((KebaCurrentRange.state as Number + KebaCurrentRangeDiff.state as Number) < 0) {
			if (KebaCurrentRange.state != 0) {
				KebaCurrentRange.sendCommand(0)
				KebaDelay.sendCommand(ON)
				KebaOnOffDelay.sendCommand(ON)
			}
		}
		else if ((KebaCurrentRange.state as Number + KebaCurrentRangeDiff.state as Number) > 100) {
			if (KebaCurrentRange.state != 100) {
			KebaCurrentRange.sendCommand(100)
			KebaDelay.sendCommand(ON)
			KebaOnOffDelay.sendCommand(ON)
			}
		}
		else {
			KebaCurrentRange.sendCommand(KebaCurrentRange.state as Number + KebaCurrentRangeDiff.state as Number)
			KebaDelay.sendCommand(ON)
			KebaOnOffDelay.sendCommand(ON)
		}	
	}
	//Renault Zoe, min. Current 12A
	if (Charge2Mode.state == 2 && KebaDelay.state != ON && Keba2State.state == 3) {
		KebaCurrentRangeDiff.sendCommand(((OhmpilotACTotal.state as DecimalType - FroniusGrid.state as DecimalType - 900) / 68).intValue)	
		if ((Keba2CurrentRange.state as Number + KebaCurrentRangeDiff.state as Number) < 60) {
			if (Keba2CurrentRange.state != 60) {
				Keba2CurrentRange.sendCommand(60)
				KebaDelay.sendCommand(ON)
				KebaOnOffDelay.sendCommand(ON)
			}
		}
		else if ((Keba2CurrentRange.state as Number + KebaCurrentRangeDiff.state as Number) > 100) {
			if (Keba2CurrentRange.state != 100) {
			Keba2CurrentRange.sendCommand(100)
			KebaDelay.sendCommand(ON)
			KebaOnOffDelay.sendCommand(ON)
			}
		}
		else {
			Keba2CurrentRange.sendCommand(Keba2CurrentRange.state as Number + KebaCurrentRangeDiff.state as Number)
			KebaDelay.sendCommand(ON)
			KebaOnOffDelay.sendCommand(ON)
		}	
	} 
end

rule "rPVChargeStopp"
when
	Item PowerFromGrid changed
then
	if (KebaOnOffDelay.state != ON) {
		if (ChargeMode.state == 2 && KebaEnabled.state == ON && Charge2Mode.state == 2 && Keba2Enabled.state == ON) {
			if ((PVChargeStoppLimit.state as Number) < (PVCharge2StoppLimit.state as Number)) {
				if ((PowerFromGrid.state as DecimalType - OhmpilotACTotal.state as DecimalType ) > PVChargeStoppLimit.state as DecimalType)  {
					KebaEnabled.sendCommand(OFF)
					KebaOnOffDelay.sendCommand(ON)
				}
			}
			else {
				if ((PowerFromGrid.state as DecimalType - OhmpilotACTotal.state as DecimalType ) > PVCharge2StoppLimit.state as DecimalType)  {
					Keba2Enabled.sendCommand(OFF)
					KebaOnOffDelay.sendCommand(ON)
				}
			}
		}
		else if (ChargeMode.state == 2 && KebaEnabled.state == ON) {
			if ((PowerFromGrid.state as DecimalType - OhmpilotACTotal.state as DecimalType ) > PVChargeStoppLimit.state as DecimalType)  {
				KebaEnabled.sendCommand(OFF)
				KebaOnOffDelay.sendCommand(ON)
			}
		}
		else if (Charge2Mode.state == 2 && Keba2Enabled.state == ON) {
			if ((PowerFromGrid.state as DecimalType - OhmpilotACTotal.state as DecimalType ) > PVCharge2StoppLimit.state as DecimalType)  {
				Keba2Enabled.sendCommand(OFF)
				KebaOnOffDelay.sendCommand(ON)
			}
		}
	}
end

rule "rPVChargeResetA"
when	
	Item KebaVehiclePlugged changed or
	Item KebaState changed or
	Item ChargeMode changed	
then
	if (ChargeMode.state == 2) {
		KebaCurrentRange.sendCommand(0)
	}
	else {
		KebaCurrentRange.sendCommand(100)
	}	
end

//Renault Zoe, min. Current 12A = 60%
rule "rPVCharge2ResetA" 
when	
	Item Keba2VehiclePlugged changed or
	Item Keba2State changed or
	Item Charge2Mode changed	
then
	if (Charge2Mode.state == 2) {
		Keba2CurrentRange.sendCommand(60)
	}
	else {
		Keba2CurrentRange.sendCommand(100)
	}
end

rule "rPVChargeMinMaxA"
when
	Item KebaCurrentRange changed
then
	if (KebaCurrentRange.state < 0) {
		KebaCurrentRange.sendCommand(0)
	}
	if (KebaCurrentRange.state > 100) {
		KebaCurrentRange.sendCommand(100)
	}
end

//Renault Zoe, min. Current 12A = 60%
rule "rPVCharge2MinMaxA"
when
	Item Keba2CurrentRange changed
then
	if (Keba2CurrentRange.state < 60) {
		Keba2CurrentRange.sendCommand(60)
	}
	if (Keba2CurrentRange.state > 100) {
		Keba2CurrentRange.sendCommand(100)
	}
end

rule "rPVChargeMode"
when 
	Item ChargeMode changed or
	Item KebaVehiclePlugged changed
then
	if (ChargeMode.state == 1) {
		KebaEnabled.sendCommand(ON)
	}
	else if (ChargeMode.state == 2) {
		KebaEnabled.sendCommand(OFF)
		KebaDelay.sendCommand(OFF)
		KebaOnOffDelay.sendCommand(OFF)
	}
	else if (ChargeMode.state == 3) {
		KebaEnabled.sendCommand(OFF)
	}
end

rule "rPVCharge2Mode"
when 
	Item Charge2Mode changed or
	Item Keba2VehiclePlugged changed
then
	if (Charge2Mode.state == 1) {
		Keba2Enabled.sendCommand(ON)
	}
	else if (Charge2Mode.state == 2) {
		Keba2Enabled.sendCommand(OFF)
		KebaDelay.sendCommand(OFF)
		KebaOnOffDelay.sendCommand(OFF)
	}
	else if (Charge2Mode.state == 3) {
		Keba2Enabled.sendCommand(OFF)
	}
end

rule "rChargeSchedulerOn"
when 
	Time cron "0 * * * * ?"
then
	if (ChargeMode.state == 3) {
		if ((ChargeStartM.state as Number).intValue == now.getMinuteOfHour && (ChargeStartH.state as Number).intValue == now.getHourOfDay) {
			KebaEnabled.sendCommand(ON)
			ChargeMode.sendCommand(1)
		}
	}
end

rule "rCharge2SchedulerOn"
when 
	Time cron "0 * * * * ?"
then
	if (Charge2Mode.state == 3) {
		if ((Charge2StartM.state as Number).intValue == now.getMinuteOfHour && (Charge2StartH.state as Number).intValue == now.getHourOfDay) {
			Keba2Enabled.sendCommand(ON)
			Charge2Mode.sendCommand(1)
		}
	}
end

rule "rChargeStartTime"
when
	Item ChargeStartH changed or
	Item ChargeStartM changed
then
	if (ChargeStartM.state == 0) {
		ChargeStartTime.postUpdate(ChargeStartH.state.toString + ":00")
	}
	else {
		ChargeStartTime.postUpdate(ChargeStartH.state.toString + ":" + ChargeStartM.state.toString)
	}
end

rule "rChargeStart2Time"
when
	Item Charge2StartH changed or
	Item Charge2StartM changed
then
	if (Charge2StartM.state == 0) {
		Charge2StartTime.postUpdate(Charge2StartH.state.toString + ":00")
	}
	else {
		Charge2StartTime.postUpdate(Charge2StartH.state.toString + ":" + Charge2StartM.state.toString)
	}
end
