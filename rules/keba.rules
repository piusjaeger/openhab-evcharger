rule "rKebaSessionEnergy"
when
	Item KebaSessionEnergy changed
then
	KebaSessionEnergykWh.sendCommand(KebaSessionEnergy.state as DecimalType / 1000)
end

rule "rKeba2SessionEnergy"
when
	Item Keba2SessionEnergy changed
then
	Keba2SessionEnergykWh.sendCommand(Keba2SessionEnergy.state as DecimalType / 1000)
end

rule "rKebaTotalEnergy"
when
	Item KebaTotalEnergy changed
then
	KebaTotalEnergykWh.sendCommand(KebaTotalEnergy.state as Number / 1000)
end

rule "rKeba2TotalEnergy"
when
	Item Keba2TotalEnergy changed
then
	Keba2TotalEnergykWh.sendCommand(Keba2TotalEnergy.state as Number / 1000)
end

rule "rKebaAmpereSelection"
when
	Item KebaCurrentRangeASelection changed
then
	if (KebaCurrentRangeASelection.state == 1) {
		KebaCurrentRange.sendCommand(0)
	}
	else if (KebaCurrentRangeASelection.state == 2) {
		KebaCurrentRange.sendCommand(60)
	}
	else if (KebaCurrentRangeASelection.state == 3) {
		KebaCurrentRange.sendCommand(100)
	}
end

rule "rKeba2AmpereSelection"
when
	Item Keba2CurrentRangeASelection changed
then
	if (Keba2CurrentRangeASelection.state == 1) {
		Keba2CurrentRange.sendCommand(0)
	}
	if (Keba2CurrentRangeASelection.state == 2) {
		Keba2CurrentRange.sendCommand(60)
	}
	else if (Keba2CurrentRangeASelection.state == 3) {
		Keba2CurrentRange.sendCommand(100)
	}
end

rule "rKebaAmpereSelectionStatus"
when
	Item KebaCurrentRange changed 
then
	if (KebaCurrentRange.state == 0) {
		KebaCurrentRangeASelection.sendCommand(1)
	}
	else if (KebaCurrentRange.state == 60) {
		KebaCurrentRangeASelection.sendCommand(2)
	}
	else if (KebaCurrentRange.state == 100) {
		KebaCurrentRangeASelection.sendCommand(3)
	}
	else {
		KebaCurrentRangeASelection.sendCommand(9)
	}
end

rule "rKeba2AmpereSelectionStatus"
when
	Item Keba2CurrentRange changed 
then
	if (Keba2CurrentRange.state == 0) {
		Keba2CurrentRangeASelection.sendCommand(1)
	}
	else if (Keba2CurrentRange.state == 60) {
		Keba2CurrentRangeASelection.sendCommand(2)
	}
	else if (Keba2CurrentRange.state == 100) {
		Keba2CurrentRangeASelection.sendCommand(3)
	}
	else {
		Keba2CurrentRangeASelection.sendCommand(9)
	}
end

rule "rKebaPercent2A"
when
	Item KebaCurrentRange changed
then
	KebaCurrentRangeA.sendCommand((KebaCurrentRange.state as DecimalType) * 0.1 + 6)
end

rule "rKeba2Percent2A"
when
	Item Keba2CurrentRange changed
then
	Keba2CurrentRangeA.sendCommand((Keba2CurrentRange.state as DecimalType) * 0.1 + 6)
end